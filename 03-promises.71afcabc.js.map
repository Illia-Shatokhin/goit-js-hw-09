{"mappings":"oeAAA,IAAAA,EAAAC,EAAA,SAEYC,SAASC,cAAc,UAAnC,MACMC,EAAOF,SAASC,cAAc,SAGpCC,EAAKC,iBAAiB,UAAUC,IAC9BA,EAAMC,iBACN,MAAMC,EAAaC,OAAOL,EAAKM,kBAAkBA,kBAAkBC,OAC7DC,EAAYH,OAChBL,EAAKM,kBAAkBG,mBAAmBH,kBAAkBC,OAExDG,EAASL,OACbL,EAAKW,iBAAiBC,uBAAuBN,kBAAkBC,OAEjE,IAAIM,EAAeT,EACfU,EAAoB,EACxBC,YAAW,KACT,MAAMC,EAAUC,aAAY,MAehC,SAAuBC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACvBL,EAEFI,EAAQ,uBAAqBN,QAAiBC,OAG9CM,EAAO,sBAAoBP,QAAeC,MAAU,G,EAtBpDO,CAAcZ,EAAmBD,GAC9Bc,MAAKC,GAAQhC,EAAAiC,OAAOC,QAAQF,KAC5BG,OAAMH,GAAQhC,EAAAiC,OAAOG,QAAQJ,KAC7BK,SAAQ,KACPpB,GAAgBL,EAChBM,GAAmB,IAEnBA,IAAsBJ,GACxBwB,cAAclB,EAAQ,GAEvBR,EAAU,GACZJ,EAAW","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst btn = document.querySelector('button');\nconst form = document.querySelector('.form');\n// console.log(btn);\n\nform.addEventListener('submit', event => {\n  event.preventDefault();\n  const firstDelay = Number(form.firstElementChild.firstElementChild.value);\n  const stepDelay = Number(\n    form.firstElementChild.nextElementSibling.firstElementChild.value\n  );\n  const amount = Number(\n    form.lastElementChild.previousElementSibling.firstElementChild.value\n  );\n  let counterDelay = firstDelay;\n  let counterItteration = 1;\n  setTimeout(() => {\n    const timerId = setInterval(() => {\n      createPromise(counterItteration, counterDelay)\n        .then(text => Notify.success(text))\n        .catch(text => Notify.failure(text))\n        .finally(() => {\n          counterDelay += stepDelay;\n          counterItteration++;\n        });\n      if (counterItteration === amount) {\n        clearInterval(timerId);\n      }\n    }, stepDelay);\n  }, firstDelay);\n});\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    if (shouldResolve) {\n      // Fulfill\n      resolve(`✅ Fulfilled promise ${position} in ${delay}ms`);\n    } else {\n      // Reject\n      reject(`❌ Rejected promise ${position} in ${delay}ms`);\n    }\n  });\n}\n\n// function createPromise(position, delay) {\n//   const shouldResolve = Math.random() > 0.3;\n//   return new Promise((resolve, reject) => {\n//     setInterval(() => {\n//       if (shouldResolve) {\n//         // Fulfill\n//         resolve('success value');\n//       } else {\n//         reject('error');\n//       }\n//     }, delay);\n//   });\n// }\n"],"names":["$iQIUW","parcelRequire","document","querySelector","$47d4ff9957288465$var$form","addEventListener","event","preventDefault","firstDelay","Number","firstElementChild","value","stepDelay","nextElementSibling","amount","lastElementChild","previousElementSibling","counterDelay","counterItteration","setTimeout","timerId","setInterval","position","delay","shouldResolve","Math","random","Promise","resolve","reject","$47d4ff9957288465$var$createPromise","then","text","Notify","success","catch","failure","finally","clearInterval"],"version":3,"file":"03-promises.71afcabc.js.map"}